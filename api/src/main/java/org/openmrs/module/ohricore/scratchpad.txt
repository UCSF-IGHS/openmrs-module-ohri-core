
Create a thread in interceptor
- synchronize compute function
- run each compute on its own thread
- (GC - stringbuilders, )

consider using rfc file (request for comments)


Have like a super class that knows how to deal with several inputs

- Abstract the computed concepts into a class
    - probably one class per computed indicator
    *calculation module????

- Create them as spring beans - get it from the context
- Create a class for String3 (string1-string2) thing
- unit testable

@Override
public Object invoke(MethodInvocation invocation) throws Throwable {

    Method method = invocation.getMethod();
    String name = method.getName();

    System.out.println("EncounterInterceptorAdvice: " + method.getName());

    Class<?>[] types = method.getParameterTypes();
    Object[] values = invocation.getArguments();

    if (name.equals("saveEncounter")) {

        for (int x = 0; x < types.length; x++) {

            Encounter encounter = (Encounter) values[x];
            Set<Obs> obs = encounter.getObs();

            System.out.println("Saving Encounter.. [" + encounter + "]");

            String string1 = "";
            String string2 = "";
            for (Obs observation : obs) {

                Collection<ConceptAnswer> answers = observation.getConcept().getAnswers();
                System.out.println("Observation name: " + x + ": " + observation.getConcept().getName().getName());
                System.out.println("Observation valT: " + observation.getValueText());
                System.out.println("Observation valN: " + observation.getValueNumeric());

                Integer conceptId = observation.getConcept().getId();
                String value = observation.getValueText();
                if (value == null || value.trim().isEmpty()) {
                    value = String.valueOf(observation.getValueNumeric());
                }

                if (conceptId == 18) {
                    string1 = value;
                } else if (conceptId == 19) {
                    string2 = value;
                }
            }

            Obs string3 = new Obs();
            string3.setEncounter(encounter);
            string3.setObsDatetime(new Date());
            string3.setPerson(encounter.getPatient());
            string3.setConcept(Context.getConceptService().getConcept(20));
            string3.setValueText(string1 + " - " + string2);
            Location location = Context.getLocationService().getDefaultLocation();
            System.out.println("Location: " + location.getName());
            string3.setLocation(location);
            Context.getObsService().saveObs(string3, "updated by Encounter interceptor");
        }
    }
}
